import AddAgentForm from "./AddAgentForm";
import EditAgentForm from "./EditAgentForm";
import DeleteAgentForm from "./DeleteAgentForm";
import React, { useState, useEffect } from "react";
function DisplayAgents() {


  const [editing, setEditing] = useState(false); //Indicates whether edting a to do
  const [deleting, setDeleting] = useState(false);
  const [adding, setAdding] = useState(false);
  const [agents, setAgents] = useState([]);

  const INITIAL_FORM_STATE = {
    agentId: null,
    firstName: "",
    middleName: "",
    lastName: "",
    dob: null,
    heightInInches: null
  
  }

  const [currentAgent, setCurrentAgent] = useState(INITIAL_FORM_STATE)

  //Grab the initial state. That is, populate agents  

  useEffect(() => {

    // 2. fetch initial todos
    fetch("http://localhost:8080/api/agent")
      .then(response => {
        if (response.status !== 200) {
          return Promise.reject("todos fetch failed")
        }
        return response.json();
      })
      .then(json => setAgents(json))
      .catch(console.log);

      
  }, []); // 3. only run once

  
  //State of DisplayAgent component changes and forces a re-draw in react. Return statement is triggered once more
  const addRow = () => {
    setAdding(true); // add mode active

  }

  const addAgent = (agent) => {
    setAdding(false);

    agent.id = agents.length + 1;

    //Don't send agent ID. It is auto generated by service
    const agentSend = {

    firstName: agent.firstName,
    middleName: agent.middleName,
    lastName: agent.lastName,
    dob: agent.dob,
    heightInInches: agent.heightInInches
    }

    const init = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      body: JSON.stringify(agentSend)
    };

    fetch("http://localhost:8080/api/agent", init)
      .then(response => {
        if (response.status !== 201) {
          return Promise.reject("response is not 200 OK");
        }
        return response.json();
      })
      .then(json => setAgents([...agents, json])) // Spread new state. Second promise--shown here--represents body of the HTTP response
      .catch(console.log);

  }

  return (
  
    <div className="agent-list">
      <div className="col">
        {editing ? (
          <>
            {/* Edit todo form is sent the current todo and the update todo function */}
            <h2>Edit agent</h2>
            <EditAgentForm
              // updateTodo={updateToDo}
              currentAgent={currentAgent}
              setEditing={setEditing}
            />
          </>
        ) : deleting ? (
          <>
            <h2>Delete agent</h2>
            <DeleteAgentForm />
          </>
        ) : adding ? (
          <>
            <h2>Add agent</h2>
            <AddAgentForm
            setAdding = {setAdding}
            onSubmit = {addAgent} /> 
          </>

        ) :
          <>

            <div className="row">
              <div className="col-2">
                <button type="button" class="col-12" onClick={() => addRow()}> Add an agent </button>
              </div>
            </div>

            <br></br>

            <h2>List of agents</h2>

            <ul>{agents.map((element) => (  //Curly brackets break into javascript

              <li key={element.agentId}>ID: {element.agentId}, DOB: {element.dob}, Last Name: {element.lastName} <button> Delete </button>
                <button> Edit </button> <br></br> <br></br>
              </li>
            ))}
            </ul>
          </>
        }
      </div>
    </div>



  )

}


export default DisplayAgents;