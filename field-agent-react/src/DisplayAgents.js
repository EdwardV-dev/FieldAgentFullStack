import AddAgentForm from "./AddAgentForm";
import EditAgentForm from "./EditAgentForm";
import DeleteAgentForm from "./DeleteAgentForm";
import React, { useState, useEffect } from "react";
function DisplayAgents() {


  const [editing, setEditing] = useState(false); //Indicates whether edting a to do
  const [deleting, setDeleting] = useState(false);
  const [adding, setAdding] = useState(false);
  const [agents, setAgents] = useState([]);

  const INITIAL_FORM_STATE = {
    agentId: null,
    firstName: "",
    middleName: "",
    lastName: "",
    dob: null,
    heightInInches: null
  
  }

  const [currentAgent, setCurrentAgent] = useState(INITIAL_FORM_STATE)

  //Grab the initial state. That is, populate agents  

  useEffect(() => {

    // 2. fetch initial todos
    fetch("http://localhost:8080/api/agent")
      .then(response => {
        if (response.status !== 200) {
          return Promise.reject("agents fetch failed")
        }
        return response.json();
      })
      .then(json => setAgents(json))
      .catch(console.log);

      
  }, []); // 3. This, along with the rest of the DisplayAgents function, is re-ran when any stateful properties change (e.g. setAdding)

  
  //State of DisplayAgent component changes and forces a re-draw in react. Return statement is triggered once more
  const addRow = () => {
    setAdding(true); // add mode active

  }

  //The parmater passed in is a selected agent
  const editRow = (agent) => {
    setEditing(true); // edit mode active
    setCurrentAgent({ ...agent });

  }

  const addAgent = (agent) => {
    setAdding(false);

    // agent.id = agents.length + 1;

    //Don't send agent ID. It is auto generated by service. AgentId is mapped onto each agent in agents after initial fetch
    const agentSend = {

    firstName: agent.firstName,
    middleName: agent.middleName,
    lastName: agent.lastName,
    dob: agent.dob,
    heightInInches: agent.heightInInches
    }

    const init = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      body: JSON.stringify(agentSend)
    };

    fetch("http://localhost:8080/api/agent", init)
      .then(response => {
        if (response.status !== 201) {
          return Promise.reject("response is not 200 OK");
        }
        return response.json();
      })
      .then(json => setAgents([...agents, json])) // Spread new state. Second promise--shown here--represents body of the HTTP response
      .catch(console.log);

  }

  //updating the state of todos array (main idea). Does current todo in state (todo.id) equal passed-in todo (todoId) 
  const updateAgent = (agentId, updatedAgent) => { //updatedToDo is the user input
    setEditing(false);

   console.log(typeof agentId);
    //Service requires an agentId. We provide it from internal frontend state. agentId is name of field in the backend
    const agentSend = {
    agentId: agentId,
    firstName: updatedAgent.firstName,
    middleName: updatedAgent.middleName,
    lastName: updatedAgent.lastName,
    dob: updatedAgent.dob,
    heightInInches: updatedAgent.heightInInches
   
  };

  const init = {
      method: "PUT",
      headers: {
          "Content-Type": "application/json",
          "Accept": "application/json"
      },
      body: JSON.stringify(agentSend)
  };

  fetch(`http://localhost:8080/api/agent/${agentId}`, init)
      .then(response => {
          if (response.status === 404) {
              console.log("Agent not found.");
          } else if (response.status === 204) {
            setAgents(agents.map(agent => (agent.agentId === agentId ? updatedAgent : agent))) //map returns a new array
            console.log("Agent updated!");
          } else {
              console.log(`Agent id ${agentId} update failed with status ${response.status}.`);
          }
      });

  }

  return (
  
    <div className="agent-list">
      <div className="col">
        {editing ? (
          <>
            {/* Edit agent form is sent the current, selected agent and the update agent function */}
            <h2>Edit agent</h2>
            <EditAgentForm
              updateAgent={updateAgent}
              currentAgent={currentAgent}
              setEditing={setEditing}
            />
          </>
        ) : deleting ? (
          <>
            <h2>Delete agent</h2>
            <DeleteAgentForm />
          </>
        ) : adding ? (
          <>
            <h2>Add agent</h2>
            <AddAgentForm
            setAdding = {setAdding}
            onSubmit = {addAgent} /> 
          </>

        ) :
          <>

            <div className="row">
              <div className="col-2">
                <button type="button" class="col-12" onClick={() => addRow()}> Add an agent </button>
              </div>
            </div>

            <br></br>

            <h2>List of agents</h2>

            <ul>{agents.map((element) => (  //Curly brackets break into javascript

              <li key={element.agentId}>ID: {element.agentId}, DOB: {element.dob}, Last Name: {element.lastName} <button> Delete </button>
                <button onClick = {() => editRow(element)}> Edit </button> <br></br> <br></br>
              </li>
            ))}
            </ul>
          </>
        }
      </div>
    </div>



  )

}


export default DisplayAgents;