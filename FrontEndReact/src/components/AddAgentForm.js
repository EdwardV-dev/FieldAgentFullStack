import React, { useState, useEffect } from "react";
import { Link, useHistory } from "react-router-dom";

const INITIAL_FORM_STATE = {
  agentId: null,
  firstName: "",
  middleName: "",
  lastName: "",
  dob: null,
  heightInInches: null

}

//max date is the following. I.e. user must enter earlier date to represent an older agent. (agent must be older than 12)

let today = new Date();
let dd = today.getDate();
let mm = today.getMonth() + 1; //January is 0.
let twelveYearsAgo = today.getFullYear() - 12;

if (dd < 10) {
   dd = '0' + dd;
}

if (mm < 10) {
   mm = '0' + mm;
} 
    
let maxDateToEnter = twelveYearsAgo + '-' + mm + '-' + dd;


function AddAgentForm() {
  // Track an object (array in this case), not properties
  const [agent, setAgent] = useState(INITIAL_FORM_STATE);
  const history = useHistory();

  const handleInputChange = function (evt) {
    //Create a shallow copy. Don't modify existing state
    let nextAgent = { ...agent };

    nextAgent[evt.target.name] = evt.target.value;

    setAgent(nextAgent);

    console.log(nextAgent);

  }

  const addAgent = (agent) => {
    
    //Don't send agent ID. It is auto generated by service. AgentId is mapped onto each agent in agents after initial fetch
    const agentSend = {
      firstName: agent.firstName,
      middleName: agent.middleName,
      lastName: agent.lastName,
      dob: agent.dob,
      heightInInches: agent.heightInInches,
    };
  
    const init = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify(agentSend),
    };
  
    fetch("http://localhost:8080/api/agent", init)
      .then((response) => {
        if (response.status !== 201) {
          return Promise.reject("response is not 200 OK");
        }
        return response.json();
      })
      .then((json) => history.push("/agents")) // redirect user to display form
      .catch(console.log);
  };


  function handleSubmit(evt) {
    evt.preventDefault();
    
    console.log("submitted!", agent);

    addAgent(agent); //nextAgent became just agent

    setAgent(INITIAL_FORM_STATE); //clears the form
  }

  //agent must be truthy (even an empty object will do) for rendering to occur
  return (
    agent &&
    <form onSubmit={handleSubmit}>
      <div>
      <label htmlFor="firstName">Agent first name</label>
      <input
        id="firstName"
        type="text"
        name="firstName"
        onChange={handleInputChange}
        required
      />
      </div>

      <div>
      <label htmlFor="middleName">Agent middle name</label>
      <input
        id="middleName"
        type="text"
        name="middleName"
        onChange={handleInputChange} 
      />
      </div>

      <div>
      <label htmlFor="lastName">Agent last name</label>
       <input
       id="lastName"
        type="text"
        name="lastName"
        onChange={handleInputChange} 
        required
      />
      </div>

      <div>
      <label htmlFor="heightInInches">Agent height in inches</label>
        <input
        id="heightInInches"
        type="number"
        name="heightInInches"
        onChange={handleInputChange} 
        required
        min = "36"
        max = "96"
      />
      </div>
    
      <div>
      <label htmlFor="dob">Agent date of birth (must be 12 or older)</label>
      <input 
      id="dob"
      type="date" 
      name="dob" 
      max = {maxDateToEnter}
      onChange={handleInputChange}/>
      </div>

      <button type="submit" className="btn btn-primary">Add agent</button>
      <Link to = "/agents">Cancel</Link>
    </form>
  )
}

export default AddAgentForm